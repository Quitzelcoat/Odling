generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  username               String          @unique
  name                   String
  email                  String          @unique
  password               String
  bio                    String?
  dateOfBirth            DateTime?
  gender                 String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  deleted                Boolean         @default(false)
  profilePic             String?
  comments               Comment[]
  followers              Follow[]        @relation("user_followedBy")
  following              Follow[]        @relation("user_follows")
  sentFollowRequests     FollowRequest[] @relation("sent_follow_requests")
  receivedFollowRequests FollowRequest[] @relation("received_follow_requests")
  likes                  Like[]
  notifications          Notification[]
  posts                  Post[]
}

model Post {
  id        Int       @id @default(autoincrement())
  authorId  Int
  title     String?
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean   @default(false)
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  authorId  Int
  postId    Int
  content   String
  parentId  Int?
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("comment_parent", fields: [parentId], references: [id])
  replies   Comment[] @relation("comment_parent")
  post      Post      @relation(fields: [postId], references: [id])

  @@index([authorId])
  @@index([postId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id         Int      @id @default(autoincrement())
  followerId Int
  followedId Int
  status     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  followed   User     @relation("user_followedBy", fields: [followedId], references: [id])
  follower   User     @relation("user_follows", fields: [followerId], references: [id])

  @@unique([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  status     String   @default("pending")
  message    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  from       User     @relation("sent_follow_requests", fields: [fromUserId], references: [id])
  to         User     @relation("received_follow_requests", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
  @@index([toUserId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
