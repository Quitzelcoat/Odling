generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  name        String
  email       String    @unique
  password    String
  bio         String?
  dateOfBirth DateTime?
  gender      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)

  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follow[] @relation("user_followedBy")
  following Follow[] @relation("user_follows")

  receivedFollowRequests FollowRequest[] @relation("received_follow_requests")
  sentFollowRequests     FollowRequest[] @relation("sent_follow_requests")

  notifications Notification[]
}

model Post {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  deleted   Boolean   @default(false)

  @@index([authorId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  content   String
  parent    Comment?  @relation("comment_parent", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("comment_parent")
  createdAt DateTime  @default(now())

  @@index([authorId])
  @@index([postId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id Int @id @default(autoincrement())

  follower   User @relation("user_follows", fields: [followerId], references: [id])
  followerId Int

  followed   User @relation("user_followedBy", fields: [followedId], references: [id])
  followedId Int

  status    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}

model FollowRequest {
  id Int @id @default(autoincrement())

  from       User @relation("sent_follow_requests", fields: [fromUserId], references: [id])
  fromUserId Int

  to       User @relation("received_follow_requests", fields: [toUserId], references: [id])
  toUserId Int

  status    String   @default("pending")
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromUserId, toUserId])
  @@index([toUserId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
